sum(Result)
#### Vectors ####
# Creating vectors
world.pop <- c(2525779, 3026003, 3691173, 4449049, 5320817, 6127700, 6916183)
world.pop
pop.first <- c(2525779, 3026003, 3691173)
pop.second <- c(4449049, 5320817, 6127700, 6916183)
pop.all <- c(pop.first, pop.second)
pop.all
# Accessing elements of a vector
world.pop[2]
world.pop[c(2, 4)]
world.pop[c(4, 2)]
world.pop[-3]
# Arithmetic operations on a vector
pop.million <- world.pop / 1000
pop.million
pop.rate <- world.pop / world.pop[1]
pop.rate
pop.increase <- world.pop[-1] - world.pop[-7]
pop.increase
percent.increase <- (pop.increase / world.pop[-7]) * 100
percent.increase
# Can replace individual elements (better way is to use round())
round(percent.increase)
percent.increase[c(1, 2)] <- c(20, 22)
percent.increase
#### Functions ####
length(world.pop)
min(world.pop)
max(world.pop)
range(world.pop)
mean(world.pop)
sum(world.pop) / length(world.pop)
year <- seq(from = 1950, to = 2010, by = 10)
year
seq(to = 2010, by = 10, from = 1950)
seq(1950, 2010, 10)
seq(2010, 1950, -10)
seq(from = 2010, to = 1950, by = -10)
2008:2012
2012:2008
names(world.pop)
names(world.pop) <- year
names(world.pop)
world.pop
#### Saving data and loading data ####
# Create a data set (Table 1.2)
# tibble() is the equivalent of data.frame() tidyverse function from the tibble package
UNpop <- data.frame(world.pop = world.pop,
year = year)
# Get basic information about the data set
names(UNpop)
nrow(UNpop)
ncol(UNpop)
dim(UNpop)
summary(UNpop)
UNpop$world.pop
UNpop[, "world.pop"] # extract the column called "world.pop"
UNpop[c(1, 2, 3, 5), ]   # extract the first three rows (and all columns)
UNpop[1:3, "year"]   # extract the first three rows of the "year" column
UNpop$world.pop[seq(from = 1, to = nrow(UNpop), by = 2)]
# File paths and working directory
getwd() # Confirm the change
#### Getting Help: mean() example ####
world.pop <- c(UNpop$world.pop, NA)
world.pop
mean(world.pop)
## Use Question Marks to see help documentation
?mean
mean(world.pop, na.rm = TRUE)
# Packages
## install.packages("devtools") # install the package
library(devtools) # load the package
## install a package from github
## devtools::install_github("kosukeimai/qss-package", build_vignettes = TRUE)
library(qss) ## loading in qss
## You may need to allow R to update/install additional packages
## Loading in tidyverse
## install.packages("tidyverse")
library(tidyverse)
## Loading in a Dataset
data(UNpop, package = "qss")
## Number of Rows and Columns - Base R
dim(UNpop)
## Number of observation, number of variables, and initial observations - tidyverse
glimpse(UNpop)
## First 6 rows
head(UNpop)
## Last 6 Rows
tail(UNpop)
## Selecting A Variable - Base R
UNpop$world.pop
## subset all rows for the column called "world.pop" from the UNpop data
UNpop[, "world.pop"]
## subset the first three rows (and all columns)
UNpop[c(1, 2, 3),]
## subset the first three rows of the "year" column
UNpop[1:3, "year"]
## Now with tidyverse
## Subset the first three rows of UNpop with tidyverse
slice(UNpop, n = 1:3)
## Subset the first three rows of UNpop with tidyverse
slice(UNpop, n = 1:3)
## Subset the first three rows of UNpop with tidyverse
dplyr::slice(UNpop, n = 1:3)
## Subset the first three rows of UNpop with tidyverse
UNpop %>%
slice(n = 1:3)
## Loading in a Dataset
data(UNpop, package = "qss")
## Number of Rows and Columns - Base R
dim(UNpop)
## Number of observation, number of variables, and initial observations - tidyverse
glimpse(UNpop)
## First 6 rows
head(UNpop)
## Last 6 Rows
tail(UNpop)
## Subset the first three rows of UNpop with tidyverse
slice(UNpop, n = 1:3)
## Subset the first three rows of UNpop with tidyverse
slice(UNpop, 1:3)
## Extract/subset the world.pop variable (column)
select(UNpop, world.pop)
## or in tidyverse, combining slice() and select()
select(slice(UNpop, 1:3), year)
UNpop %>% # take the UNpop data we have loaded, and then...
slice(1:3) %>% # subset the first three rows, and then...
select(year) # subset the year column
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
## Packages
library(tidyverse)
library(qss)
knitr::include_graphics("image_3.png")
load("~/GOVT8001/Lab 3/white_minwage.RData")
## Data Loading
## Replace this with your working directory
load("~/GOVT8001/Lab 3/white_minwage.RData")
## Data Loading
## Replace this with your working directory
load("~/GOVT8001/Lab 3/white_minwage.RData")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
## Packages
library(tidyverse)
library(qss)
```{r, echo=FALSE}
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
## Packages
library(tidyverse)
library(qss)
knitr::include_graphics("intro_image_.jpg")
knitr::include_graphics("image_1.png")
# Author: QSS Ch. 1 script with edits by Mark Richardson & Benjamin Reese
# Date: 08/24/2023
# Purpose: Introduction to R - GOVT 8001 Lab I
#### Arithmetic Operations ####
5 + 3
5 - 3
5 / 3
5 ^ 3
5 * (10 - 3)
sqrt(4)
#### Objects ####
result <- 5 + 3
result
print(result)
result <- 5 - 3
result
kosuke <- "instructor"
kosuke
kosuke <- "instructor and author"
kosuke
Result <- 5
Result + 2
result
class(result)
Result
class(Result)
class(sqrt)
sum(result)
sum(Result)
#### Vectors ####
# Creating vectors
world.pop <- c(2525779, 3026003, 3691173, 4449049, 5320817, 6127700, 6916183)
world.pop
pop.first <- c(2525779, 3026003, 3691173)
pop.second <- c(4449049, 5320817, 6127700, 6916183)
pop.all <- c(pop.first, pop.second)
pop.all
# Accessing elements of a vector
world.pop[2]
world.pop[c(2, 4)]
world.pop[c(4, 2)]
world.pop[-3]
# Arithmetic operations on a vector
pop.million <- world.pop / 1000
pop.million
pop.rate <- world.pop / world.pop[1]
pop.rate
pop.increase <- world.pop[-1] - world.pop[-7]
pop.increase
percent.increase <- (pop.increase / world.pop[-7]) * 100
percent.increase
# Can replace individual elements (better way is to use round())
round(percent.increase)
percent.increase[c(1, 2)] <- c(20, 22)
percent.increase
#### Functions ####
length(world.pop)
min(world.pop)
max(world.pop)
range(world.pop)
mean(world.pop)
sum(world.pop) / length(world.pop)
year <- seq(from = 1950, to = 2010, by = 10)
year
seq(to = 2010, by = 10, from = 1950)
seq(1950, 2010, 10)
seq(2010, 1950, -10)
seq(from = 2010, to = 1950, by = -10)
2008:2012
2012:2008
names(world.pop)
names(world.pop) <- year
names(world.pop)
world.pop
#### Saving data and loading data ####
# Create a data set (Table 1.2)
# tibble() is the equivalent of data.frame() tidyverse function from the tibble package
UNpop <- data.frame(world.pop = world.pop,
year = year)
# Get basic information about the data set
names(UNpop)
nrow(UNpop)
ncol(UNpop)
dim(UNpop)
summary(UNpop)
UNpop$world.pop
UNpop[, "world.pop"] # extract the column called "world.pop"
UNpop[c(1, 2, 3, 5), ]   # extract the first three rows (and all columns)
UNpop[1:3, "year"]   # extract the first three rows of the "year" column
UNpop$world.pop[seq(from = 1, to = nrow(UNpop), by = 2)]
# File paths and working directory
getwd() # Confirm the change
#### Getting Help: mean() example ####
world.pop <- c(UNpop$world.pop, NA)
world.pop
mean(world.pop)
## Use Question Marks to see help documentation
?mean
mean(world.pop, na.rm = TRUE)
# Packages
## install.packages("devtools") # install the package
library(devtools) # load the package
## install a package from github
## devtools::install_github("kosukeimai/qss-package", build_vignettes = TRUE)
library(qss) ## loading in qss
## You may need to allow R to update/install additional packages
## Loading in tidyverse
## install.packages("tidyverse")
library(tidyverse)
## Loading in a Dataset
data(UNpop, package = "qss")
## Number of Rows and Columns - Base R
dim(UNpop)
## Number of observation, number of variables, and initial observations - tidyverse
glimpse(UNpop)
## First 6 rows
head(UNpop)
## Last 6 Rows
tail(UNpop)
## Selecting A Variable - Base R
UNpop$world.pop
## subset all rows for the column called "world.pop" from the UNpop data
UNpop[, "world.pop"]
## subset the first three rows (and all columns)
UNpop[c(1, 2, 3),]
## subset the first three rows of the "year" column
UNpop[1:3, "year"]
## Now with tidyverse
## Subset the first three rows of UNpop with tidyverse
slice(UNpop, 1:3)
## Extract/subset the world.pop variable (column)
select(UNpop, world.pop)
## Base R subset the first three rows of the year variable
UNpop[1:3, "year"]
## or in tidyverse, combining slice() and select()
select(slice(UNpop, 1:3), year)
## Basic Data Wrangling with the tidyverse using pipes (i.e., %>%)
UNpop %>% # take the UNpop data we have loaded, and then...
slice(1:3) %>% # subset the first three rows, and then...
select(year) # subset the year column
UNpop %>%
slice(seq(1, n(), by = 2)) %>% # using a sequence from 1 to n()
select(world.pop)
pop.1970 <- UNpop %>% # take the UNpop data and then....
filter(year == 1970) %>% # subset rows where the year variable is equal to 1970
select(world.pop) %>% # subset just the world.pop column
pull() # return a vector, not a tibble
## Print the vector to the console to see it
print(pop.1970)
UNpop.mill <- UNpop %>% # create a new tibble from UNpop
mutate(world.pop.mill = world.pop / 1000) %>% # create a new variable, world.pop.mill
select(-world.pop) # drop the original world.pop column
## Adding a variable with if_else
UNpop.mill <- UNpop.mill %>%
mutate(after.1980 = if_else(year >= 1980, 1, 0))
## Creating a vector of the years of interest
specific.years <- c(1950, 1980, 2000)
## Adding a variable with if_else and %in%
UNpop.mill <- UNpop.mill %>%
mutate(year.of.interest = if_else(year %in% specific.years, 1, 0))
summary(UNpop.mill)
mean(UNpop.mill$world.pop.mill)
## Add a row where values for all columns is NA
UNpop.mill.wNAs <- UNpop.mill %>%
add_row(year = NA, world.pop.mill = NA,
after.1980 = NA,
year.of.interest = NA)
## Take the mean of world.pop.mill (returns NA)
mean(UNpop.mill.wNAs$world.pop.mill)
## Take the mean of world.pop.mill (ignores the NA)
mean(UNpop.mill.wNAs$world.pop.mill, na.rm = TRUE)
## Other Summary Statistics with tidyverse
UNpop.mill %>%
summarize(mean.pop = mean(world.pop.mill),
median.pop = median(world.pop.mill))
UNpop.mill %>%
group_by(after.1980) %>% # create subset group for each value of after.1980
summarize(mean.pop = mean(world.pop.mill)) # calculate mean for each group
knitr::include_graphics("image_2_.png")
## Loading Data
data(resume, package = "qss")
## Learning About the Dataset
head(resume)
tail(resume)
glimpse(resume)
dim(resume)
summary(resume)
View(resume) ## Comment this out when knitting.
## Number of observations by race
resume %>%
group_by(race) %>%
count()
## Call Back for white Sounding Name Applicants
resume %>%
group_by(race) %>%
summarise(callback_rates = mean(call))
## Calculating Callback Proportions
race_call <- resume %>%
group_by(race, call) %>%
count() %>%
pivot_wider(names_from = call,
values_from = n) %>%
rename(no_call = `0`,
call = `1`) %>%
mutate(total_resumes = no_call + call,
call_prop = call / total_resumes)
## Difference in call back rates
race_diff <- race_call %>%
select(race, call_prop) %>%
pivot_wider(names_from = c(race),
values_from = call_prop) %>%
mutate(race_diff = white - black) %>%
select(race_diff)
## Printing
race_diff
## Callbacks by race and gender
resume %>%
group_by(race, call, sex) %>%
count() %>%
pivot_wider(names_from = call,
values_from = n) %>%
rename(no_call = `0`,
call = `1`) %>%
mutate(total_resumes = no_call + call,
call_prop = call / total_resumes)
## Saving tibble from 8
dta <- resume %>%
group_by(race, call, sex) %>%
count() %>%
pivot_wider(names_from = call,
values_from = n) %>%
rename(no_call = `0`,
call = `1`) %>%
mutate(total_resumes = no_call + call,
call_prop = call / total_resumes)
## Calculating Differences
call_backs <- dta %>%
select(race, sex, call_prop) %>%
pivot_wider(names_from = c(sex, race),
values_from = call_prop) %>%
mutate(white_sex_diff = female_white - male_white,
black_sex_diff = female_black - male_black,
male_race_diff = male_white - male_black,
female_race_diff = female_white - female_black) %>%
select(white_sex_diff, black_sex_diff, male_race_diff, female_race_diff)
## Printing
print(call_backs) ## print() is optional
knitr::include_graphics("image_3.png")
## Packages
library(tidyverse)
library(ggthemes)
## Data Loading
## Replace this with your working directory
load("~/GOVT8001/Lab 3/white_minwage.RData")
## Building A Basic Histogram
df.county %>%
ggplot(aes(x = minimum.wage))
## Building A Basic Histogram
df.county %>%
ggplot(aes(x = minimum.wage)) +
geom_histogram(aes(y = ..density..))
## Building A Basic Histogram
df.county %>%
ggplot(aes(x = minimum.wage)) +
geom_histogram(aes(y = ..density..), col = "dark red", fill = "tomato")
## Building A Basic Histogram
df.county %>%
ggplot(aes(x = minimum.wage)) +
geom_histogram(aes(y = ..density..), col = "dark red", fill = "tomato") +
theme_minimal()
## Building A Basic Histogram
df.county %>%
ggplot(aes(x = minimum.wage)) +
geom_histogram(aes(y = ..density..), col = "dark red", fill = "tomato") +
theme_minimal() +
labs(title = "Distribution of Minimum Wage", subtitle = "All US Counties 1996 - 2016",
x = "Minimum Wage", caption = "Data Source: Markovich & White (2022)",
y = "Density")
## Or You Can Save the Basic Plot and Experiment
p <- df.county %>%
ggplot(aes(x = minimum.wage)) +
geom_histogram(aes(y = ..density..), col = "dark red", fill = "tomato")
p
p +
theme_minimal() +
labs(title = "Distribution of Minimum Wage", subtitle = "All US Counties 1996 - 2016",
x = "Minimum Wage", caption = "Data Source: Markovich & White (2022)",
y = "Density")
## Simulated Data
df <- data.frame("age" = c("18 to 29", "36 to 50", "51 to 64", "65+"),
"popPct" = c(29, 21, 30, 20),
"svyPct" = c(19, 21, 32, 28))
df
## Building A Basic Barplot
df %>%
rename(Population = popPct, Survey = svyPct) %>%
pivot_longer(-age, names_to = "Group", values_to = "Percent")
## Building A Basic Barplot
df %>%
rename(Population = popPct, Survey = svyPct) %>%
pivot_longer(-age, names_to = "Group", values_to = "Percent") %>%
ggplot(aes(x = age, y = Percent, fill = Group))
## Building A Basic Barplot
df %>%
rename(Population = popPct, Survey = svyPct) %>%
pivot_longer(-age, names_to = "Group", values_to = "Percent") %>%
ggplot(aes(x = age, y = Percent, fill = Group)) +
geom_bar(stat = "identity", position = "dodge")
## Building A Basic Barplot
df %>%
rename(Population = popPct, Survey = svyPct) %>%
pivot_longer(-age, names_to = "Group", values_to = "Percent") %>%
ggplot(aes(x = age, y = Percent, fill = Group)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_grey() +
theme_minimal() +
labs(x = "Age Group", y = "Percent",
title = "Population and Survey Sample Proportions by Age Group")
df.county %>%
ggplot(aes(x = minimum.wage)) +
geom_histogram(aes(y = ..density..), col = "pink", fill = "black") +
theme_economist() +
labs(title = "Our Beautiful Plot")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
## Packages
library(tidyverse)
library(qss)
knitr::include_graphics("image_4.png")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
## Showing if_else()
SaratogaHouses %>%
mutate(fireplace = if_else(fireplaces > 0, 1, 0)) %>%
select(fireplace)
SaratogaHouses %>%
mutate(large_house = if_else(rooms > mean(rooms), 1, 0)) %>%
select(large_house)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
## Showing if_else()
SaratogaHouses %>%
mutate(fireplace = if_else(fireplaces > 0, 1, 0)) %>%
select(fireplace) %>%
slice(1:5)
## Using dplyr()
SaratogaHouses %>%
group_by(bedrooms) %>%
summarise(avg_price = mean(price))
## Most Fireplace in 5 bedroom house
max(SaratogaHouses$fireplaces[SaratogaHouses$bedrooms == 5])
bookdown::render_book("index.Rmd", "bookdown::gitbook")
